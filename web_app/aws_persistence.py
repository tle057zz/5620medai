"""
Minimal RDS persistence for insurance quotes.

Inserts (idempotently where possible):
  - users (by username)
  - patients (by user_id)
  - insurance_products (by name+provider)
  - quotes (always inserts a new row)

Environment overrides (optional): PGHOST, PGPORT, PGDATABASE, PGUSER, PGPASSWORD
"""

from __future__ import annotations

import os
import json
from typing import List, Dict, Any
from datetime import date

import psycopg2
from psycopg2.extras import RealDictCursor


PGHOST = os.environ.get('PGHOST', 'elec5620-as02-database.c38ki6o4abha.ap-southeast-2.rds.amazonaws.com')
PGPORT = int(os.environ.get('PGPORT', '5432'))
PGDATABASE = os.environ.get('PGDATABASE', 'postgres')
PGUSER = os.environ.get('PGUSER', 'postgres')
PGPASSWORD = os.environ.get('PGPASSWORD', 'ghR4BwyqbEM1xhmrCKbM')


def _connect():
    return psycopg2.connect(
        host=PGHOST,
        port=PGPORT,
        dbname=PGDATABASE,
        user=PGUSER,
        password=PGPASSWORD,
    )


def _ensure_user_and_patient(cur, username: str, name: str | None = None, email: str | None = None) -> int:
    cur.execute("SELECT id FROM users WHERE username = %s", (username,))
    row = cur.fetchone()
    if row:
        user_id = row[0]
    else:
        cur.execute(
            """
            INSERT INTO users(name, email, password_hash, username)
            VALUES (%s, %s, 'x', %s)
            RETURNING id
            """,
            (name or username, email or f"{username}@example.com", username),
        )
        user_id = cur.fetchone()[0]

    cur.execute("INSERT INTO patients(user_id, consent_on_ai, consent_timestamp) VALUES (%s, TRUE, NOW()) ON CONFLICT (user_id) DO NOTHING", (user_id,))
    return user_id


def _get_or_create_product(cur, product: Any) -> tuple[int, bool]:
    provider = getattr(product, 'provider', None) or product.get('provider')
    name = getattr(product, 'name', None) or product.get('name')
    cur.execute("SELECT id FROM insurance_products WHERE name = %s AND provider = %s", (name, provider))
    row = cur.fetchone()
    if row:
        return row[0], False
    # Build fields per schema
    payload = {
        'name': name,
        'provider': provider,
        'product_link': getattr(product, 'product_link', None) or None,
        'insurance_type': 'Health',
        'coverage': 'Generated by web_app',
        'premium': getattr(product, 'monthly_premium', None) or getattr(product, 'premium', None) or 0,
        'plan_type': getattr(product, 'plan_type', None),
        'monthly_premium': getattr(product, 'monthly_premium', None) or 0,
        'coverage_amount': getattr(product, 'coverage_amount', None) or 0,
        'annual_deductible': getattr(product, 'annual_deductible', None) or 0,
        'copay': getattr(product, 'copay', None) or 0,
        'coinsurance': getattr(product, 'coinsurance', None) or 0,
        'max_out_of_pocket': getattr(product, 'max_out_of_pocket', None) or 0,
        'coverage_details': json.dumps(list(getattr(product, 'coverage_details', []) or [])),
        'exclusions': json.dumps(list(getattr(product, 'exclusions', []) or [])),
    }
    cur.execute(
        """
        INSERT INTO insurance_products(
          name, provider, product_link, insurance_type,
          coverage, premium,
          plan_type, monthly_premium, coverage_amount, annual_deductible,
          copay, coinsurance, max_out_of_pocket, coverage_details, exclusions
        ) VALUES (%(name)s, %(provider)s, %(product_link)s, %(insurance_type)s,
                 %(coverage)s, %(premium)s,
                 %(plan_type)s, %(monthly_premium)s, %(coverage_amount)s, %(annual_deductible)s,
                 %(copay)s, %(coinsurance)s, %(max_out_of_pocket)s, %(coverage_details)s::jsonb, %(exclusions)s::jsonb)
        RETURNING id
        """,
        payload,
    )
    return cur.fetchone()[0], True


def save_quotes_to_rds(quote_request: Any, quotes: List[Any], user_ctx: Dict[str, str] | None = None) -> None:
    """Persist generated quotes and products to AWS RDS.

    - Ensures a user + patient exists (by username)
    - Creates products when missing
    - Inserts a quote row per plan
    """
    if not quotes:
        return
    username = (user_ctx or {}).get('username') or str(getattr(quote_request, 'user_id', 'patient'))
    name = (user_ctx or {}).get('name') or username
    email = (user_ctx or {}).get('email') or f"{username}@example.com"

    with _connect() as conn:
        conn.autocommit = False
        cur = conn.cursor()
        try:
            patient_user_id = _ensure_user_and_patient(cur, username=username, name=name, email=email)

            # Insert optional medical_history and income_details rows
            mh_id = None
            try:
                mh = getattr(quote_request, 'medical_history', None)
                hd = getattr(quote_request, 'health_data', None)
                if mh:
                    cur.execute(
                        """
                        INSERT INTO medical_histories(patient_id, surgeries, medication, past_illness)
                        VALUES (%s, %s, %s, %s)
                        RETURNING id
                        """,
                        (
                            patient_user_id,
                            ', '.join(getattr(mh, 'surgeries', []) or []),
                            ', '.join(getattr(hd, 'medications', []) or []),
                            ', '.join(getattr(mh, 'past_conditions', []) or []),
                        ),
                    )
                    mh_id = cur.fetchone()[0]
            except Exception:
                mh_id = None

            # Insert health_data with lifestyle fields (smoking_status, alcohol_consumption)
            health_data_id = None
            try:
                hd = getattr(quote_request, 'health_data', None)
                if hd:
                    # Extract BMI to calculate weight if needed (simplified: assume average height for BMI calc)
                    weight_val = None
                    bmi_val = getattr(hd, 'bmi', None)
                    if bmi_val:
                        # Rough estimate: weight = BMI * (1.7m)^2 â‰ˆ BMI * 2.89
                        weight_val = float(bmi_val) * 2.89
                    # Parse blood pressure if available
                    bp_sys, bp_dia = None, None
                    bp = getattr(hd, 'blood_pressure', None)
                    if bp:
                        try:
                            # Format: "120/80" or "120/80 mmHg"
                            parts = str(bp).replace('mmHg', '').strip().split('/')
                            if len(parts) == 2:
                                bp_sys = int(parts[0].strip())
                                bp_dia = int(parts[1].strip())
                        except Exception:
                            pass
                    
                    cur.execute(
                        """
                        INSERT INTO health_data(patient_id, weight_kg, height_cm, bp_systolic, bp_diastolic, smoking_status, alcohol_consumption, measure_date)
                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                        RETURNING id
                        """,
                        (
                            patient_user_id,
                            weight_val,
                            None,  # height_cm not directly available in health_data
                            bp_sys,
                            bp_dia,
                            getattr(hd, 'smoking_status', None) or None,
                            getattr(hd, 'alcohol_consumption', None) or None,
                            date.today(),
                        ),
                    )
                    health_data_id = cur.fetchone()[0]
            except Exception as e:
                print(f"[RDS persist] health_data insert failed: {e}")

            inc_id = None
            try:
                inc = getattr(quote_request, 'income_details', None)
                if inc:
                    status_map = {
                        'full-time': 'Employed',
                        'part-time': 'Employed',
                        'self-employed': 'SelfEmployed',
                        'student': 'Student',
                        'unemployed': 'Unemployed',
                    }
                    enum_status = status_map.get((getattr(inc, 'employment_status', '') or '').strip().lower())
                    cur.execute(
                        """
                        INSERT INTO income_details(patient_id, annual_income, employment_status, dependents, effective_date)
                        VALUES (%s, %s, %s, %s, %s)
                        RETURNING id
                        """,
                        (
                            patient_user_id,
                            float(getattr(inc, 'annual_income', 0) or 0),
                            enum_status,
                            int(getattr(inc, 'dependents', 0) or 0),
                            date.today(),
                        ),
                    )
                    inc_id = cur.fetchone()[0]
            except Exception:
                inc_id = None

            # Insert quote_requests row
            qr_db_id = None
            try:
                cur.execute(
                    """
                    INSERT INTO quote_requests(user_input, patient_id, medical_history_id, income_detail_id, processing_status)
                    VALUES (%s, %s, %s, %s, 'Completed')
                    RETURNING id
                    """,
                    (
                        f"web_app {getattr(quote_request, 'request_id', '')}",
                        patient_user_id,
                        mh_id,
                        inc_id,
                    ),
                )
                qr_db_id = cur.fetchone()[0]
            except Exception:
                qr_db_id = None

            # Link health_data to quote_request via junction table
            if qr_db_id and health_data_id:
                try:
                    cur.execute(
                        """
                        INSERT INTO quote_request_health_data(quote_request_id, health_data_id)
                        VALUES (%s, %s)
                        ON CONFLICT DO NOTHING
                        """,
                        (qr_db_id, health_data_id),
                    )
                except Exception as e:
                    print(f"[RDS persist] quote_request_health_data link failed: {e}")

            quotes_count = 0
            recs_count = 0
            created_products = 0
            reused_products = 0
            for rank_idx, q in enumerate(quotes, start=1):
                product = getattr(q, 'product')
                product_id, created = _get_or_create_product(cur, product)
                if created:
                    created_products += 1
                else:
                    reused_products += 1
                # Gather score fields; some may be float; cast to int where appropriate
                suitability = int(round(getattr(q, 'suitability_score', 0)))
                cost_score = int(round(getattr(q, 'cost_score', 0))) if getattr(q, 'cost_score', None) is not None else None
                coverage_score = int(round(getattr(q, 'coverage_score', 0))) if getattr(q, 'coverage_score', None) is not None else None
                overall = int(round(getattr(q, 'overall_score', (suitability + (cost_score or 0) + (coverage_score or 0)) / 3)))
                rationale = getattr(q, 'rationale', '')
                # For legacy numeric cost, map from monthly premium
                try:
                    numeric_cost = float(getattr(product, 'monthly_premium', None) or 0)
                except Exception:
                    numeric_cost = None
                cur.execute(
                    """
                    INSERT INTO quotes(
                      suitability_score, cost, cost_score, coverage_score, overall_score,
                      coverage_summary, rationale, insurance_product_id, patient_id
                    ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
                    """,
                    (
                        suitability, numeric_cost, cost_score, coverage_score, overall,
                        'Generated by AI quote engine', rationale, product_id, patient_user_id,
                    ),
                )
                quotes_count += 1
                # Insert quote_recommendations with a default controller
                try:
                    cur.execute("SELECT id FROM recommendation_controllers WHERE strategy='Hybrid' ORDER BY id LIMIT 1")
                    row = cur.fetchone()
                    controller_id = row[0] if row else None
                    if controller_id is None:
                        cur.execute("INSERT INTO recommendation_controllers(strategy, version) VALUES ('Hybrid','v1') RETURNING id")
                        controller_id = cur.fetchone()[0]
                    cur.execute("SELECT currval(pg_get_serial_sequence('quotes','id'))")
                    (quote_id,) = cur.fetchone()
                    cur.execute(
                        """
                        INSERT INTO quote_recommendations(
                          recommendation_controller_id, quote_id, patient_id, quote_request_id, rank, suitability_score, rationale
                        ) VALUES (%s, %s, %s, %s, %s, %s, %s)
                        ON CONFLICT DO NOTHING
                        """,
                        (
                            controller_id,
                            quote_id,
                            patient_user_id,
                            qr_db_id,
                            rank_idx,
                            suitability,
                            'Ranked by hybrid engine',
                        ),
                    )
                    recs_count += 1
                except Exception:
                    pass
            conn.commit()
            health_log = f"health_data(id={health_data_id})" if health_data_id else "health_data(skip)"
            print(
                f"[RDS persist] patient={patient_user_id} request={qr_db_id} "
                f"{health_log} mh={mh_id} income={inc_id} "
                f"products: +{created_products}/reuse {reused_products} "
                f"quotes: {quotes_count} recs: {recs_count}"
            )
            if health_data_id:
                hd = getattr(quote_request, 'health_data', None)
                if hd:
                    smoking = getattr(hd, 'smoking_status', None)
                    alcohol = getattr(hd, 'alcohol_consumption', None)
                    if smoking or alcohol:
                        print(f"[RDS persist] lifestyle: smoking={smoking} alcohol={alcohol}")
        except Exception:
            conn.rollback()
            raise


